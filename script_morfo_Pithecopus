setwd("D:/Lab. Anuros Neotropicais/Phyllomedusa franciscae/franciscus 2017/morfometria")

dir()
getwd()

mydata<-read.table("morfometria_franciscus_setembro2017.txt")

head(mydata)
str(mydata)
fix(mydata)
summary(mydata)

mydata$locality

plot(mydata$locality, mydata$SVL, main="snout-vent length")
plot(mydata$locality, mydata$HL, main="head length")
plot(mydata$locality, mydata$HW, main="head width")
plot(mydata$locality, mydata$AGL, main="axilla-groin length") 
plot(mydata$locality, mydata$ED, main="eye diameter")
plot(mydata$locality, mydata$TD, main="tympanum diameter")
plot(mydata$locality, mydata$END, main="eye-nostril distance")
plot(mydata$locality, mydata$IND, main="internarial distance")
plot(mydata$locality, mydata$UAL, main="upper arm length")
plot(mydata$locality, mydata$FAL, main="forearm length")
plot(mydata$locality, mydata$HAL, main="hand length")
plot(mydata$locality, mydata$TGL, main="thigh length")
plot(mydata$locality, mydata$TL, main="tibia length")
plot(mydata$locality, mydata$TAL, main="tarsus length")
plot(mydata$locality, mydata$FL, main="foot length")


##############################################################
# teste de normalidade multivariada ????????
require(MVN)
head(mydata)

mardiaTest(mydata[,2:16], qqplot = TRUE, cov = T)
#dados não apresentam distribuição multivariada, com ou sem argumento 'cov'

#########################################################

mydata$locality

fran_hypo<-mydata[which(mydata$locality == "franciscus" | mydata$locality 
== "hypo"),]

fran_hypo<-droplevels(fran_hypo)


fran_ara<-mydata[which(mydata$locality == "franciscus" | mydata$locality 
== "araguaius"),]

fran_ara<-droplevels(fran_ara)


fran_azur<-mydata[which(mydata$locality == "franciscus" | mydata$locality 
== "azureus"),]

fran_azur<-droplevels(fran_azur)

fran_nordest<-mydata[which(mydata$locality == "franciscus" | mydata$locality 
== "nordestinus"),]

fran_nordest<-droplevels(fran_nordest)

##########################################################
require("coin")

#significância do SVL

wilcox_test(SVL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(SVL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(SVL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(SVL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 2.44e-05, 5.46e-09, 2.2e-16)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.800e-16 2.440e-05 1.092e-08 8.800e-16


#significância do HL

wilcox_test(HL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.822e-12, 0.0004658, 0.2168, 0.1896)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 1.1288e-11 1.3974e-03 3.7920e-01 3.7920e-01


#significância HW

wilcox_test(HW~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HW~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HW~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HW~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 2.25e-09, 5.32e-05, 2.2e-16)

p.adjust(p.values, method = "holm", n = 4)
#resultado:  8.80e-16 4.50e-09 5.32e-05 8.80e-16


#significância AGL

wilcox_test(AGL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(AGL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(AGL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(AGL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(0.0008471, 0.0002519, 0.0002519, 9.136e-06)

p.adjust(p.values, method = "holm", n = 4)
#resultado:  8.4710e-04 7.5570e-04 7.5570e-04 3.6544e-05


#significância ED

wilcox_test(ED~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(ED~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(ED~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(ED~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(3.124e-16, 0.121, 0.5894, 0.07626)

p.adjust(p.values, method = "holm", n = 4)
#resultado:  1.2496e-15 2.4200e-01 5.8940e-01 2.2878e-01


#significância TD

wilcox_test(TD~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TD~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TD~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TD~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(0.0002656,  0.428, 0.9428, 0.01194)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 0.0010624 0.8560000 0.9428000 0.0358200


#significância END

wilcox_test(END~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(END~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(END~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(END~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(7.857e-09, 3.776e-13,  0.2844, 1.088e-11)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 1.5714e-08 1.5104e-12 2.8440e-01 3.2640e-11


#significância IND

wilcox_test(IND~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(IND~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(IND~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(IND~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 0.2592, 1.07e-07, 5.544e-16)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.8000e-16 2.5920e-01 2.1400e-07 1.6632e-15


#significância UAL

wilcox_test(UAL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(UAL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(UAL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(UAL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 0.0002984,  5.38e-05, 2.086e-13)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.800e-16 2.984e-04 1.076e-04 6.258e-13


#significância FAL

wilcox_test(FAL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(FAL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(FAL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(FAL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 0.933, 0.01101, 1.958e-14)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.800e-16 9.330e-01 2.202e-02 5.874e-14


#significância HAL

wilcox_test(HAL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HAL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HAL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(HAL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 1.603e-06, 8.288e-05, 4.313e-13)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.8000e-16 3.2060e-06 8.2880e-05 1.2939e-12


#significância TGL

wilcox_test(TGL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TGL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TGL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TGL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 0.009292, 0.0003374, 1.847e-14)

p.adjust(p.values, method = "holm", n = 4)
#resultado:  8.800e-16 9.292e-03 6.748e-04 5.541e-14


#significância TL

wilcox_test(TL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 0.02498, 0.001409, 2.353e-11)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.800e-16 2.498e-02 2.818e-03 7.059e-11


#significância TAL

wilcox_test(TAL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TAL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TAL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(TAL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 0.7897, 0.1095, 3.671e-09)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.8000e-16 7.8970e-01 2.1900e-01 1.1013e-08


#significância FL

wilcox_test(FL~locality, data = fran_hypo,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(FL~locality, data = fran_ara,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(FL~locality, data = fran_azur,
conf.int = F, conf.level = 0.95, distribution = "exact")

wilcox_test(FL~locality, data = fran_nordest,
conf.int = F, conf.level = 0.95, distribution = "exact")

p.values<-c(2.2e-16, 5.766e-06, 8.414e-05, 1.06e-06)

p.adjust(p.values, method = "holm", n = 4)
#resultado: 8.8000e-16 1.1532e-05 8.4140e-05 3.1800e-06


##############################################################
#RandomForest

head(mydata)

require(randomForest)

pithe.rf <- randomForest(locality ~ ., data=mydata, importance=TRUE, 
proximity=TRUE, ntree=1000)

print(pithe.rf)

require(rfPermute)

proximityPlot(pithe.rf, dim.x = 1, dim.y = 2, legend.loc = "top", 
circle.size = 3)

pithe.rf$predicted # que foi classificado como?

plot(outlier(pithe.rf), type="h", col=c("green", "red", "blue", "black", "purple")[as.numeric(mydata$locality)]) # acima de 10 = outliers graves

## Look at variable importance:

round(importance(pithe.rf), 1)

varImpPlot(pithe.rf, sort=TRUE, n.var=min(30, nrow(pithe.rf$importance)), type=NULL, class=NULL, scale=TRUE, main=deparse(substitute(Variables)))

# varUsed(pseud.rf, by.tree=FALSE, count=TRUE)


#################################################
# Discriminant Adegenet

require(adegenet)

head(mydata)
str(mydata)
fix(mydata)
summary(mydata)
mydata2<-mydata[,2:16]
str(mydata2)

population<-mydata$locality

names(population)<-rownames(mydata)

# grp <- find.clusters(mydata2, cluster=grupo)

dapc1 <-dapc(mydata2, population, n.pca=11, n.da=4, center=TRUE, 
scale=T, var.contrib=TRUE, pca.info=TRUE, pca.select=c("nbEig","percVar"),
perc.pca=NULL)

dapc1$pca.eig
dapc1$pca.loadings

dapc1$eig
dapc1$loadings

dapc1$eig # = autovalores
dapc1$loadings # = autovetores

par(mfrow=c(2,1))
compoplot(dapc1, only.grp=NULL, subset=NULL, new.pred=NULL, var.contrib=TRUE,
col=c("black", "red2", "green2", "gold", "blue2"), lab=NULL, legend=F, txt.leg=NULL, ncol=1, 
grid=T, posi= "bottomleft", cleg=.9, bg=transp("white"))

scatter(dapc1, xax=1, yax=2, grp=dapc1$grp, col=c("green2", "black", "red2", "gold", "blue2"), 
pch=20, cex = 1.9, bg="white", solid=1, scree.da=TRUE, scree.pca=T, 
posi.da="topleft", posi.pca="topright", bg.inset="white", ratio.da=.25, ratio.pca=.25, 
inset.da=0.01, inset.pca=0.01, inset.solid=.4, onedim.filled=TRUE, 
mstree=FALSE, lwd=1, lty=1, segcol="black", legend=FALSE, posi.leg="topright",
cleg=1, txt.leg=levels(grp), cstar = 1, cellipse = TRUE, axesell = TRUE, 
label = NULL, clabel = 1.5, xlim = NULL, ylim = NULL, grid = FALSE, 
addaxes = TRUE, origin = c(0,0), include.origin = TRUE, sub = "", csub = 1.5, 
possub = "bottomleft", cgrid = 1.5, pixmap = NULL, contour = NULL, area = NULL)

#levels(population)

par(mfrow=c(1,2))
plot(mydata$locality, mydata$interpulse, main="Interpulse interval")
plot(mydata$locality, mydata$pulseRate, main="Pulse rate")

loadingplot(dapc1$var.contr) # x = dapc object
x<-dapc1$var.contr
x*100

str(dapc1)

assignplot(dapc1)


